#pragma once

enum TLV_TYPES
{
	TLV_NONE,

	TLV_COMM_SERVERID,		// uint32
	TLV_COMM_FWDCMD,		// uint32
	TLV_COMM_SESSIONID,		// uint32
	TLV_COMM_PARENT_SESSIONID,	// uint32
	TLV_COMM_BUFFDATA,		// binary
	TLV_COMM_INTDATA,		// uint32
	TLV_COMM_STRDATA,		// string
	TLV_COMM_DIRECTION,		// uint32

	TLV_HTTP_METHOD,		// string
	TLV_HTTP_URL,			// string
	TLV_HTTP_MIME,		    // string
	TLV_HTTP_RULE_WORK,     // uint32
	TLV_HTTP_HEAD_LEN,      // uint32
	TLV_HTTP_FILE_NAME,     // string
	TLV_HTTP_FILE_DOWNLOAD, // uint32
	TLV_HTTP_VIRUS_DETECTION,//uint32
	TLV_HTTP_CONTENT_LENGTH, //uint64
	TLV_HTTP_EXTRA,			// string

	TLV_FTP_DOWN_FILELEN,		// uint64
	TLV_FTP_UP_FILELEN,		// uint64
	TLV_FTP_PARENT_SESSIONID, // uint32
	TLV_FTP_VIRUS_DETECTION, // uint32

	TLV_TYPE_COUNT
};



// use on tlvbox_dump
#pragma GCC diagnostic push
#pragma GCC diagnostic error "-Wswitch"
#define TLV_ENUM_TO_STR(t) case t: return #t
static inline char* tlv_enum_to_str(enum TLV_TYPES t)
{
	switch (t)
	{
		TLV_ENUM_TO_STR(TLV_NONE);

		TLV_ENUM_TO_STR(TLV_COMM_SERVERID);
		TLV_ENUM_TO_STR(TLV_COMM_FWDCMD);
		TLV_ENUM_TO_STR(TLV_COMM_SESSIONID);
		TLV_ENUM_TO_STR(TLV_COMM_PARENT_SESSIONID);
		TLV_ENUM_TO_STR(TLV_COMM_BUFFDATA);
		TLV_ENUM_TO_STR(TLV_COMM_INTDATA);
		TLV_ENUM_TO_STR(TLV_COMM_STRDATA);
		TLV_ENUM_TO_STR(TLV_COMM_DIRECTION);

		TLV_ENUM_TO_STR(TLV_HTTP_METHOD);
		TLV_ENUM_TO_STR(TLV_HTTP_URL);
		TLV_ENUM_TO_STR(TLV_HTTP_MIME);
		TLV_ENUM_TO_STR(TLV_HTTP_RULE_WORK);
		TLV_ENUM_TO_STR(TLV_HTTP_HEAD_LEN);
		TLV_ENUM_TO_STR(TLV_HTTP_FILE_NAME);
		TLV_ENUM_TO_STR(TLV_HTTP_FILE_DOWNLOAD);
		TLV_ENUM_TO_STR(TLV_HTTP_VIRUS_DETECTION);
		TLV_ENUM_TO_STR(TLV_HTTP_CONTENT_LENGTH);
		TLV_ENUM_TO_STR(TLV_HTTP_EXTRA);

		TLV_ENUM_TO_STR(TLV_FTP_DOWN_FILELEN);
		TLV_ENUM_TO_STR(TLV_FTP_UP_FILELEN);
		TLV_ENUM_TO_STR(TLV_FTP_PARENT_SESSIONID);
		TLV_ENUM_TO_STR(TLV_FTP_VIRUS_DETECTION);

		TLV_ENUM_TO_STR(TLV_TYPE_COUNT);
	}
	return "UNKNOWN";
}
#pragma GCC diagnostic pop

